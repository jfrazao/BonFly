<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.6.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="WorkflowInput">
        <Name>Source1</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:RangeThreshold">
          <cv:Lower>
            <cv:Val0>19</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:Lower>
          <cv:Upper>
            <cv:Val0>255</cv:Val0>
            <cv:Val1>255</cv:Val1>
            <cv:Val2>255</cv:Val2>
            <cv:Val3>255</cv:Val3>
          </cv:Upper>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>ConnectedComponent</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea xsi:nil="true" />
          <cv:MaxArea>1200</cv:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Centroid</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:RangeThreshold">
          <cv:Lower>
            <cv:Val0>65</cv:Val0>
            <cv:Val1>0</cv:Val1>
            <cv:Val2>0</cv:Val2>
            <cv:Val3>0</cv:Val3>
          </cv:Lower>
          <cv:Upper>
            <cv:Val0>255</cv:Val0>
            <cv:Val1>255</cv:Val1>
            <cv:Val2>255</cv:Val2>
            <cv:Val3>255</cv:Val3>
          </cv:Upper>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>ConnectedComponent</cv:Mode>
          <cv:Method>ChainApproxNone</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea xsi:nil="true" />
          <cv:MaxArea>1200</cv:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionExtremes">
          <cv:Method>Radial</cv:Method>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Name>HEAD/TAIL</scr:Name>
        <scr:Script>
import clr
clr.AddReference("OpenCV.Net")
from System import Tuple, Math, Single
from OpenCV.Net import *
from math import sin, cos, pi


def distancesquare(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx * dx + dy * dy

@returns(Tuple[Point2f,Point2f])
def process(value):
  centroid = value.Item1
  extreme1 = value.Item2
  extreme2 = value.Item3
  head = value.Item3
  tail = value.Item3

  if (distancesquare(centroid,extreme1) &lt;= distancesquare(centroid,extreme2)):
    head = extreme2
    tail = extreme1
  else:
    head = extreme1
    tail = extreme2

  #CV.Circle(output, Point(headState), 3, Scalar.Rgb(204, 0, 0), -1)

  #CV.Circle(output, Point(tailState), 3, Scalar.Rgb(0, 204, 0), -1)

  #CV.Circle(output, Point(headState), 2, Scalar.Rgb(0, 0, 204), -1)
  #CV.Circle(output, Point(tail), 2, Scalar.Rgb(0, 204, 0), -1)
  #CV.Circle(output, Point(head), 2, Scalar.Rgb(0, 0, 204), -1)
  return Tuple[Point2f,Point2f](head,tail)</scr:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="WorkflowOutput" />
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="0" To="6" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="13" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="10" To="11" Label="Source1" />
      <Edge From="10" To="12" Label="Source1" />
      <Edge From="11" To="13" Label="Source2" />
      <Edge From="12" To="13" Label="Source3" />
      <Edge From="13" To="14" Label="Source1" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="14" To="16" Label="Source1" />
      <Edge From="15" To="17" Label="Source1" />
      <Edge From="16" To="17" Label="Source2" />
      <Edge From="17" To="18" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>